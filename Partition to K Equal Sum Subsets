Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets
whose sums are all equal.

******----recursive code but tle:-----*****class Solution {
public:

bool solve(vector<int> & nums, vector<bool>& visited, int k, int startind, int currsum, int target){
    if(k==1) return true;
    if(currsum>target) return false;
    if(currsum==target){
      return solve(nums, visited, k-1,0,0,target);
    }
        for(int i=startind; i<nums.size(); i++){
        if(visited[i]) continue;
        if(nums[i]>target) return false;

        visited[i]=true;
        if(solve(nums, visited , k, i+1, currsum+ nums[i], target)) return true;
        visited[i]= false;
    }
return false;
}

    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int N=nums.size();
        int sum=accumulate(nums.begin(), nums.end(),0);
        if(sum%k!=0)return false;
        sort(nums.rbegin(), nums.rend());

        vector<bool> visited(nums.size(), false);
        return solve(nums, visited, k,0,0,sum/k);
}
};

        
